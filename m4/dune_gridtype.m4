# DUNE_DEFINE_GRIDTYPE([GRIDTYPE],[ASSERTION],[DUNETYPE],[HEADER],[DGFHEADER])
#
# Add a new GRIDTYPE target DUNE's preprocessor magic.
# 
# Parameters: GRIDTYPE   name of the new target
#             ASSERTION  condition to be checked by the preprocessor
#             DUNETYPE   C++ type of the grid
#             HEADER     name of the header file which includes the grid
#             DGFHEADER  name of the header for the DGFGridFactory for the grid
#
# Example: DUNE_DEFINE_GRIDTYPE([YASPGRID],[GRIDDIM == WORLDDIM],[Dune::YaspGrid< dimgrid >],[dune/grid/yaspgrid.hh],[dune/grid/io/file/dgfparser/dgfyasp.hh])
AC_DEFUN([DUNE_DEFINE_GRIDTYPE],[
  NEXT_DEFINITION=
  NEXT_DEFINITION="${NEXT_DEFINITION}#if defined $1\n"
  NEXT_DEFINITION="${NEXT_DEFINITION}  #if HAVE_GRIDTYPE\n"
  NEXT_DEFINITION="${NEXT_DEFINITION}    #error \"Ambiguous definition of GRIDTYPE.\"\n"
  NEXT_DEFINITION="${NEXT_DEFINITION}  #endif // #if HAVE_GRIDTYPE\n"
  AS_IF([test "x$2" != "x"],[
    NEXT_DEFINITION="${NEXT_DEFINITION}  #if ! ($2)\n"
    NEXT_DEFINITION="${NEXT_DEFINITION}    #error \"Preprocessor assertion $2 failed.\"\n"
    NEXT_DEFINITION="${NEXT_DEFINITION}  #endif // #if ! ($2)\n"
  ])
  for file in $4 ; do
    NEXT_DEFINITION="${NEXT_DEFINITION}  #include <$file>\n"
  done
  NEXT_DEFINITION="${NEXT_DEFINITION}  namespace Dune\n"
  NEXT_DEFINITION="${NEXT_DEFINITION}  {\n"
  NEXT_DEFINITION="${NEXT_DEFINITION}    namespace GridSelector\n"
  NEXT_DEFINITION="${NEXT_DEFINITION}    {\n"
  NEXT_DEFINITION="${NEXT_DEFINITION}      typedef $3 GridType;\n"
  NEXT_DEFINITION="${NEXT_DEFINITION}    }\n"
  NEXT_DEFINITION="${NEXT_DEFINITION}  }\n"
  NEXT_DEFINITION="${NEXT_DEFINITION}  #define HAVE_GRIDTYPE 1\n"
  NEXT_DEFINITION="${NEXT_DEFINITION}#endif // #if defined $1\n\n"

  DUNE_GRIDTYPE_DEFINITIONS="${DUNE_GRIDTYPE_DEFINITIONS}${NEXT_DEFINITION}"

  NEXT_DEFINITION=
  NEXT_DEFINITION="${NEXT_DEFINITION}#if defined $1\n"
  for file in $5 ; do
    NEXT_DEFINITION="${NEXT_DEFINITION}  #include <$file>\n"
  done
  NEXT_DEFINITION="${NEXT_DEFINITION}#endif // #if defined $1\n\n"

  DUNE_DGFGRIDTYPE_DEFINITIONS="${DUNE_DGFGRIDTYPE_DEFINITIONS}${NEXT_DEFINITION}"
])

# DUNE_OUTPUT_GRIDTYPE
# 
# Writes out 'gridtype.hh' and 'dgfgridtype.hh' for the project.
#
# If a project intends to use this magic, its configure.ac should contain a
# call to this macro (somewhere around AC_OUTPUT)
AC_DEFUN([DUNE_OUTPUT_GRIDTYPE],[
  GRIDTYPE_HH="gridtype.hh"
  AC_MSG_NOTICE([creating $GRIDTYPE_HH])

  cat > $GRIDTYPE_HH << EOF
// Warning: Do not edit this file. It is generated automatically by the
//          module's configure script.
//
// If you want to edit the contents of this file, have a look at
// 'dune-grid/m4/dune_gridtype.m4'.
#ifndef DUNE_GRIDTYPE_HH
#define DUNE_GRIDTYPE_HH

#include <dune/common/deprecated.hh>
#include <dune/grid/utility/griddim.hh>

EOF

  echo "$DUNE_GRIDTYPE_DEFINITIONS" | sed -e 's/\\n/\n/g' >> $GRIDTYPE_HH

  cat >> $GRIDTYPE_HH << EOF
// NOGRID is used to specify that no default was set during configure
// If NOGRID and HAVE_GRIDTYPE are both not set then no grid was selected
// and an error is produced
#if defined NOGRID 
  #error "No grid type selected; set the make variable GRIDTYPE (e.g., GRIDTYPE=YASPGRID)."
#endif

#if ! HAVE_GRIDTYPE
  #error "Invalid grid type selected; set the make variable GRIDTYPE to a valid grid."
#endif // #if ! HAVE_GRIDTYPE

typedef Dune::GridSelector::GridType GridType DUNE_DEPRECATED; 

#endif // #ifndef DUNE_GRIDTYPE_HH
EOF

  DGFGRIDTYPE_HH="dgfgridtype.hh"
  AC_MSG_NOTICE([creating $DGFGRIDTYPE_HH])

  cat > $DGFGRIDTYPE_HH << EOF
#ifndef DUNE_DGFGRIDTYPE_HH
#define DUNE_DGFGRIDTYPE_HH

#include <gridtype.hh>

EOF

  echo "$DUNE_DGFGRIDTYPE_DEFINITIONS" | sed -e 's/\\n/\n/g' >> $DGFGRIDTYPE_HH

  cat >> $DGFGRIDTYPE_HH << EOF
#endif // #ifndef DUNE_DGFGRIDTYPE_HH
EOF
])
